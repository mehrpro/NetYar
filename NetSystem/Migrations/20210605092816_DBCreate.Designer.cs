// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetSystem.Models;

namespace NetSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210605092816_DBCreate")]
    partial class DBCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NetSystem.Entity.Applicant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicantTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ID");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("NetSystem.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User_Id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NetSystem.Entity.Coding", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<short>("CodeIndex")
                        .HasColumnType("smallint");

                    b.Property<string>("CodeTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CompanyID_FK")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("GroupID_FK")
                        .HasColumnType("int");

                    b.Property<int>("SubGroupID_FK")
                        .HasColumnType("int");

                    b.Property<string>("UserID_FK")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID_FK");

                    b.HasIndex("GroupID_FK");

                    b.HasIndex("SubGroupID_FK");

                    b.HasIndex("UserID_FK");

                    b.ToTable("Codings");
                });

            modelBuilder.Entity("NetSystem.Entity.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyTiltle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("CompnayIndex")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("NetSystem.Entity.ConsumablePart", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConsumablePartTitel")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<long>("RequestID_FK")
                        .HasColumnType("bigint");

                    b.Property<int>("UnitID_FK")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RequestID_FK");

                    b.HasIndex("UnitID_FK");

                    b.ToTable("ConsumableParts");
                });

            modelBuilder.Entity("NetSystem.Entity.Group", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID_FK")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("GroupIndex")
                        .HasColumnType("tinyint");

                    b.Property<string>("GroupTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID_FK");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("NetSystem.Entity.Machinery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CodeID_FK")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MachineryTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ID");

                    b.HasIndex("CodeID_FK");

                    b.ToTable("Machineries");
                });

            modelBuilder.Entity("NetSystem.Entity.RequestRepair", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantID_FK")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MachineryID_FK")
                        .HasColumnType("int");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RequestDataTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TypeofRepairID_FK")
                        .HasColumnType("int");

                    b.Property<string>("UserID_FK")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ApplicantID_FK");

                    b.HasIndex("MachineryID_FK");

                    b.HasIndex("TypeofRepairID_FK");

                    b.HasIndex("UserID_FK");

                    b.ToTable("RequestRepairs");
                });

            modelBuilder.Entity("NetSystem.Entity.SubGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID_FK")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("GroupID_FK")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime2");

                    b.Property<byte>("SubGroupIndex")
                        .HasColumnType("tinyint");

                    b.Property<string>("SubGroupTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID_FK");

                    b.HasIndex("GroupID_FK");

                    b.ToTable("SubGroups");
                });

            modelBuilder.Entity("NetSystem.Entity.TypeofRepair", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ID");

                    b.ToTable("TypeofRepairs");
                });

            modelBuilder.Entity("NetSystem.Entity.UnitOfMeasurement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ID");

                    b.ToTable("UnitOfMeasurements");
                });

            modelBuilder.Entity("NetSystem.Entity.WorkOrder", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Cause_Exhaustion")
                        .HasColumnType("bit");

                    b.Property<bool>("Cause_OperatorNegligence")
                        .HasColumnType("bit");

                    b.Property<bool>("Cause_QualityofSpareParts")
                        .HasColumnType("bit");

                    b.Property<bool>("Cause_RepairmanError")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("Creating")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateTimeClosing")
                        .HasColumnType("datetime");

                    b.Property<bool>("Electrical")
                        .HasColumnType("bit");

                    b.Property<bool>("Equip")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("Mecanical")
                        .HasColumnType("bit");

                    b.Property<bool>("NoSpareParts")
                        .HasColumnType("bit");

                    b.Property<string>("NoSparePartsDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short>("NoSparePartsTime")
                        .HasColumnType("smallint");

                    b.Property<bool>("Other")
                        .HasColumnType("bit");

                    b.Property<string>("OtherDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("OtherError")
                        .HasColumnType("bit");

                    b.Property<string>("OtherErrorDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short>("OtherTime")
                        .HasColumnType("smallint");

                    b.Property<bool>("PersonHours")
                        .HasColumnType("bit");

                    b.Property<string>("PersonHoursDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short>("PersonHoursTime")
                        .HasColumnType("smallint");

                    b.Property<bool>("Piping")
                        .HasColumnType("bit");

                    b.Property<bool>("ProductionPlanning")
                        .HasColumnType("bit");

                    b.Property<string>("ProductionPlanningDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short>("ProductionPlanningTime")
                        .HasColumnType("smallint");

                    b.Property<int>("RepairOutSideReportID_FK")
                        .HasColumnType("int");

                    b.Property<bool>("RepairOutside")
                        .HasColumnType("bit");

                    b.Property<string>("ReportRepair")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<long>("RequestID_FK")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartWorking")
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.HasIndex("RequestID_FK");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NetSystem.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NetSystem.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetSystem.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NetSystem.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetSystem.Entity.Coding", b =>
                {
                    b.HasOne("NetSystem.Entity.Company", "Company")
                        .WithMany("Codings")
                        .HasForeignKey("CompanyID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NetSystem.Entity.Group", "Group")
                        .WithMany("Codings")
                        .HasForeignKey("GroupID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NetSystem.Entity.SubGroup", "SubGroup")
                        .WithMany("Codings")
                        .HasForeignKey("SubGroupID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NetSystem.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("Codings")
                        .HasForeignKey("UserID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Company");

                    b.Navigation("Group");

                    b.Navigation("SubGroup");
                });

            modelBuilder.Entity("NetSystem.Entity.ConsumablePart", b =>
                {
                    b.HasOne("NetSystem.Entity.RequestRepair", "RequestRepair")
                        .WithMany("ConsumableParts")
                        .HasForeignKey("RequestID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NetSystem.Entity.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany("ConsumableParts")
                        .HasForeignKey("UnitID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestRepair");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("NetSystem.Entity.Group", b =>
                {
                    b.HasOne("NetSystem.Entity.Company", "Company")
                        .WithMany("Groups")
                        .HasForeignKey("CompanyID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("NetSystem.Entity.Machinery", b =>
                {
                    b.HasOne("NetSystem.Entity.Coding", "Coding")
                        .WithMany("Machineries")
                        .HasForeignKey("CodeID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coding");
                });

            modelBuilder.Entity("NetSystem.Entity.RequestRepair", b =>
                {
                    b.HasOne("NetSystem.Entity.Applicant", "Applicant")
                        .WithMany("RequestRepairs")
                        .HasForeignKey("ApplicantID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NetSystem.Entity.Machinery", "Machinery")
                        .WithMany("RequestRepairs")
                        .HasForeignKey("MachineryID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NetSystem.Entity.TypeofRepair", "TypeofRepair")
                        .WithMany("RequestRepairs")
                        .HasForeignKey("TypeofRepairID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NetSystem.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("RequestRepairs")
                        .HasForeignKey("UserID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Machinery");

                    b.Navigation("TypeofRepair");
                });

            modelBuilder.Entity("NetSystem.Entity.SubGroup", b =>
                {
                    b.HasOne("NetSystem.Entity.Company", "Company")
                        .WithMany("SubGroups")
                        .HasForeignKey("CompanyID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NetSystem.Entity.Group", "Group")
                        .WithMany("SubGroups")
                        .HasForeignKey("GroupID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("NetSystem.Entity.WorkOrder", b =>
                {
                    b.HasOne("NetSystem.Entity.RequestRepair", "RequestRepair")
                        .WithMany("WorkOrders")
                        .HasForeignKey("RequestID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestRepair");
                });

            modelBuilder.Entity("NetSystem.Entity.Applicant", b =>
                {
                    b.Navigation("RequestRepairs");
                });

            modelBuilder.Entity("NetSystem.Entity.ApplicationUser", b =>
                {
                    b.Navigation("Codings");

                    b.Navigation("RequestRepairs");
                });

            modelBuilder.Entity("NetSystem.Entity.Coding", b =>
                {
                    b.Navigation("Machineries");
                });

            modelBuilder.Entity("NetSystem.Entity.Company", b =>
                {
                    b.Navigation("Codings");

                    b.Navigation("Groups");

                    b.Navigation("SubGroups");
                });

            modelBuilder.Entity("NetSystem.Entity.Group", b =>
                {
                    b.Navigation("Codings");

                    b.Navigation("SubGroups");
                });

            modelBuilder.Entity("NetSystem.Entity.Machinery", b =>
                {
                    b.Navigation("RequestRepairs");
                });

            modelBuilder.Entity("NetSystem.Entity.RequestRepair", b =>
                {
                    b.Navigation("ConsumableParts");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("NetSystem.Entity.SubGroup", b =>
                {
                    b.Navigation("Codings");
                });

            modelBuilder.Entity("NetSystem.Entity.TypeofRepair", b =>
                {
                    b.Navigation("RequestRepairs");
                });

            modelBuilder.Entity("NetSystem.Entity.UnitOfMeasurement", b =>
                {
                    b.Navigation("ConsumableParts");
                });
#pragma warning restore 612, 618
        }
    }
}
